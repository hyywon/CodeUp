# 문제
#         7
#       3   8
#     8   1   0
#   2   7   4   4
# 4   5   2   6   5
# 위 그림은 크기가 5인 정수 삼각형의 한 모습이다.
# 맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 
# 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 
# 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.
# 삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

# 입력
# 첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

# 출력
# 첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.

import sys
read = sys.stdin.readline

n = int(read())
tec = [list(map(int,read().split())) for _ in range(n)]
# 동적 프로그래밍은 작은 값을 가지고 문제를 저장하고, 빠르게 풀 수 있음
# 위에서 부터 작은 값들을 합해 가면서 그중에서 가장 큰 값을 구해 냄

# Bottom up 
for i in range(1,n):
    for j in range(len(tec[i])):
        if j == 0  : 
            # 맨 왼쪽 값이면 바로 위의 값만 합해서 넣어줌
            tec[i][j]= (tec[i-1][j] + tec[i][j])
        elif i == j:
            # 맨 오른쪽 값이면 맨 오른쪽 값을 합해서 넣어줌 
            tec[i][j] = (tec[i][j] + tec[i-1][j-1])
        else:
            # 그 외의 값은 각각 양쪽의 값을 받을 수 있기 때문에 그중에서 큰 값을 받아옴
            tec[i][j]= max(tec[i-1][j-1],tec[i-1][j]) + tec[i][j]

print(max(tec[n-1]))